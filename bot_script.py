import os
import requests
import google.generativeai as genai
import google.api_core.exceptions
import html # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å html –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

# --- 1. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API-–∫–ª—é—á–µ–π –∏ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤ ---
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = os.getenv("CHANNEL_ID")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ Gemini
try:
    genai.configure(api_key=GEMINI_API_KEY)
    model = genai.GenerativeModel('gemini-1.5-flash')
    print("–ú–æ–¥–µ–ª—å Gemini —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: gemini-1.5-flash")
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}")
    if BOT_TOKEN and CHANNEL_ID:
        try:
            telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            requests.post(telegram_url, json={"chat_id": CHANNEL_ID, "text": f"‚ùå –ë–æ—Ç: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini API: {e}"})
        except:
            pass
    exit(1)

# --- 2. –°–ø–∏—Å–æ–∫ –∑–Ω–∞–∫–æ–≤ –∑–æ–¥–∏–∞–∫–∞ –∏ –∏—Ö —Å–º–∞–π–ª–∏–∫–∏ ---
zodiac_signs_with_emojis = {
    "–û–≤–µ–Ω": "‚ôà",
    "–¢–µ–ª–µ—Ü": "‚ôâ",
    "–ë–ª–∏–∑–Ω–µ—Ü—ã": "‚ôä",
    "–†–∞–∫": "‚ôã",
    "–õ–µ–≤": "‚ôå",
    "–î–µ–≤–∞": "‚ôç",
    "–í–µ—Å—ã": "‚ôé",
    "–°–∫–æ—Ä–ø–∏–æ–Ω": "‚ôè",
    "–°—Ç—Ä–µ–ª–µ—Ü": "‚ôê",
    "–ö–æ–∑–µ—Ä–æ–≥": "‚ôë",
    "–í–æ–¥–æ–ª–µ–π": "‚ôí",
    "–†—ã–±—ã": "‚ôì"
}

# –î–µ–ª–∏–º –∑–Ω–∞–∫–∏ –∑–æ–¥–∏–∞–∫–∞ –Ω–∞ –¥–≤–µ –≥—Ä—É–ø–ø—ã –ø–æ 6
signs_group_1 = list(zodiac_signs_with_emojis.items())[0:6]
signs_group_2 = list(zodiac_signs_with_emojis.items())[6:12]

# --- 3. –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ —Å–±–æ—Ä–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ ---
def generate_and_assemble_horoscopes(signs_group, group_number):
    print(f"\n–ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ –¥–ª—è –ì—Ä—É–ø–ø—ã {group_number} ({len(signs_group)} –∑–Ω–∞–∫–æ–≤)...")
    
    current_horoscopes_text = ""
    current_error_messages_list = []

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–π –≥—Ä—É–ø–ø—ã
    current_horoscopes_text += f"‚ú® <b>–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø (–ß–∞—Å—Ç—å {group_number}/2):</b> ‚ú®\n\n"
    
    for sign, emoji in signs_group:
        horoscope_prompt = f"""
        –¢—ã - –º—É–¥—Ä—ã–π –∞—Å—Ç—Ä–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø.
        –ù–∞–ø–∏—à–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è –∑–Ω–∞–∫–∞ –∑–æ–¥–∏–∞–∫–∞ "{sign}".
        –û–Ω –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å:
        - –í–æ–æ–¥—É—à–µ–≤–ª—è—é—â–∏–º –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º.
        - –°–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–∏–Ω-–¥–≤–∞ –ø–æ–ª–µ–∑–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –Ω–∞ –¥–µ–Ω—å.
        - –ù–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç—Ç–æ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
        - –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å—Ä–∞–∑—É —Å —Ç–µ–∫—Å—Ç–∞ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ (–±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Ç–∏–ø–∞ "–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è ...").
        - –ü–∏—à–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        """

        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≥–æ—Ä–æ—Å–∫–æ–ø–∞ –¥–ª—è {sign}...")
            gemini_response = model.generate_content(horoscope_prompt)
            generated_horoscope = gemini_response.text
            generated_horoscope = generated_horoscope.strip('*').strip()
            
            escaped_generated_horoscope = html.escape(generated_horoscope)

            print(f"–ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è {sign} —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω Gemini.")

            current_horoscopes_text += (
                f"{emoji} –ì–æ—Ä–æ—Å–∫–æ–ø –¥–ª—è <b>{sign}</b>:\n"
                f"{escaped_generated_horoscope}\n\n"
            )

        except google.api_core.exceptions.GoogleAPICallError as e:
            print(f"–û—à–∏–±–∫–∞ Google API –¥–ª—è {sign}: {e}")
            current_error_messages_list.append(f"‚ùå –û—à–∏–±–∫–∞ Google API –¥–ª—è <b>{sign}</b>: {html.escape(str(e))}")

        except requests.exceptions.RequestException as req_err:
            print(f"–û—à–∏–±–∫–∞ HTTP/Connection –¥–ª—è {sign}: {req_err}")
            current_error_messages_list.append(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è <b>{sign}</b>: {html.escape(str(req_err))}")

        except Exception as e:
            print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è {sign}: {e}")
            current_error_messages_list.append(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è <b>{sign}</b>: {html.escape(str(e))}")
    
    return current_horoscopes_text, current_error_messages_list

# --- 4. –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---

telegram_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"

# –ì—Ä—É–ø–ø–∞ 1
assembled_horoscopes_1, errors_1 = generate_and_assemble_horoscopes(signs_group_1, 1)
final_message_to_send_1 = assembled_horoscopes_1
if errors_1:
    final_message_to_send_1 += "\n\n---\n"
    final_message_to_send_1 += "–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏:\n"
    final_message_to_send_1 += "\n".join(errors_1)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
final_message_to_send_1 += "üí´ –ù–∞–¥–µ–µ–º—Å—è, –¥–µ–Ω—å –ø—Ä–∏–Ω–µ—Å–µ—Ç –≤–∞–º —É–¥–∞—á—É!\n" # –£–±–∏—Ä–∞–µ–º '\n' –≤ –∫–æ–Ω—Ü–µ, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ª–∏—à–Ω–µ–≥–æ –ø—Ä–æ–±–µ–ª–∞

print(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ß–∞—Å—Ç–∏ 1, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –≤ Telegram: {len(final_message_to_send_1)} —Å–∏–º–≤–æ–ª–æ–≤.")

try:
    telegram_payload_1 = {
        "chat_id": CHANNEL_ID,
        "text": final_message_to_send_1,
        "parse_mode": "HTML"
    }
    telegram_response_1 = requests.post(telegram_url, json=telegram_payload_1)
    telegram_response_1.raise_for_status()
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –ß–∞—Å—Ç–∏ 1 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
except requests.exceptions.RequestException as e:
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ß–∞—Å—Ç–∏ 1 –≤ Telegram: {e}")
    error_message_tg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ß–∞—Å—Ç–∏ 1 –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {html.escape(str(e))}"
    try:
        requests.post(telegram_url, json={"chat_id": CHANNEL_ID, "text": error_message_tg, "parse_mode": "HTML"})
    except: pass
except Exception as e:
    print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ß–∞—Å—Ç–∏ 1: {e}")
    error_message_tg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ß–∞—Å—Ç–∏ 1: {html.escape(str(e))}"
    try:
        requests.post(telegram_url, json={"chat_id": CHANNEL_ID, "text": error_message_tg, "parse_mode": "HTML"})
    except: pass


# –ì—Ä—É–ø–ø–∞ 2
assembled_horoscopes_2, errors_2 = generate_and_assemble_horoscopes(signs_group_2, 2)
final_message_to_send_2 = assembled_horoscopes_2
if errors_2:
    final_message_to_send_2 += "\n\n---\n"
    final_message_to_send_2 += "–ü—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–æ—Ä–æ—Å–∫–æ–ø–æ–≤ —ç—Ç–æ–π —á–∞—Å—Ç–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∏ –æ—à–∏–±–∫–∏:\n"
    final_message_to_send_2 += "\n".join(errors_2)

# –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ü–µ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏
final_message_to_send_2 += "üí´ –í—Å–µ–≥–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ!" # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ

print(f"–î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ß–∞—Å—Ç–∏ 2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ –≤ Telegram: {len(final_message_to_send_2)} —Å–∏–º–≤–æ–ª–æ–≤.")

try:
    telegram_payload_2 = {
        "chat_id": CHANNEL_ID,
        "text": final_message_to_send_2,
        "parse_mode": "HTML"
    }
    telegram_response_2 = requests.post(telegram_url, json=telegram_payload_2)
    telegram_response_2.raise_for_status()
    print("–°–æ–æ–±—â–µ–Ω–∏–µ –ß–∞—Å—Ç–∏ 2 —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram!")
except requests.exceptions.RequestException as e:
    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ß–∞—Å—Ç–∏ 2 –≤ Telegram: {e}")
    error_message_tg = f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ß–∞—Å—Ç–∏ 2 –≥–æ—Ä–æ—Å–∫–æ–ø–∞: {html.escape(str(e))}"
    try:
        requests.post(telegram_url, json={"chat_id": CHANNEL_ID, "text": error_message_tg, "parse_mode": "HTML"})
    except: pass
except Exception as e:
    print(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ß–∞—Å—Ç–∏ 2: {e}")
    error_message_tg = f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ß–∞—Å—Ç–∏ 2: {html.escape(str(e))}"
    try:
        requests.post(telegram_url, json={"chat_id": CHANNEL_ID, "text": error_message_tg, "parse_mode": "HTML"})
    except: pass

print("\n–°–∫—Ä–∏–ø—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É.")

